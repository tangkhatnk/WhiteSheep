import discord
from discord.ext import commands
import random
import datetime
from database import get_user_data, update_user_data
import json
import os
import asyncio
from datetime import datetime, timedelta, timezone
VN_TZ = timezone(timedelta(hours=7))

TICKET_PRICE = 100

# Random s·ªë tr√∫ng cho t·ª´ng gi·∫£i
def random_unique_numbers(count, length):
    numbers = set()
    while len(numbers) < count:
        n = str(random.randint(10**(length-1), 10**length-1)).zfill(length)
        numbers.add(n)
    return list(numbers)

def get_all_today_tickets(today):
    # L·∫•y t·∫•t c·∫£ s·ªë v√© ƒë√£ ph√°t trong ng√†y h√¥m nay
    import sqlite3
    from database import DB_PATH
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT so_ve FROM users WHERE hsd = ?", (today,))
        return set(str(row[0]).zfill(6) for row in cursor.fetchall() if row[0])

class XoSo(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.xoso_task = self.bot.loop.create_task(self.auto_xoso())

    async def auto_xoso(self):
        await self.bot.wait_until_ready()
        while not self.bot.is_closed():
            try:
                now = datetime.now(VN_TZ)
                next_run = (now + timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)
                wait_seconds = (next_run - now).total_seconds()
                await asyncio.sleep(wait_seconds)
                await self.run_xoso_daily()
            except Exception as e:
                print(f"[auto_xoso] L·ªói: {e}")
                await asyncio.sleep(60)  # ƒê·ª£i 1 ph√∫t r·ªìi th·ª≠ l·∫°i n·∫øu c√≥ l·ªói

    async def run_xoso_daily(self):
        today = datetime.now(VN_TZ).date()
        today_str = str(today)
        ketqua_path = "xoso_ketqua.json"
        if os.path.exists(ketqua_path):
            with open(ketqua_path, "r", encoding="utf-8") as f:
                all_kq = json.load(f)
        else:
            all_kq = {}
        if today_str in all_kq:
            return  # ƒê√£ random r·ªìi, kh√¥ng random l·∫°i
        # Random s·ªë tr√∫ng cho t·ª´ng gi·∫£i
        giai_config = [
            ("ƒê·∫∑c bi·ªát", 1, 6, 1000, "üéâ"),
            ("Nh·∫•t", 1, 5, 500, "ü•à"),
            ("Nh√¨", 3, 4, 400, "ü•â"),
            ("Ba", 5, 3, 300, "üèÖ"),
            ("B·ªën", 10, 2, 200, "üèÖ"),
        ]
        giai_so = []
        for name, count, length, prize, emoji in giai_config:
            so_trung = random_unique_numbers(count, length)
            giai_so.append([name, so_trung, length, prize, emoji])
        all_kq[today_str] = giai_so
        with open(ketqua_path, "w", encoding="utf-8") as f:
            json.dump(all_kq, f, ensure_ascii=False)
        # G·ª≠i log k·∫øt qu·∫£ x·ªï s·ªë cho admin
        try:
            log_channel_id = 1398452904700153866
            log_channel = self.bot.get_channel(log_channel_id)
            if log_channel:
                await log_channel.send(f"üéâ ƒê√£ quay x·ªï s·ªë ng√†y {today_str}")
                print(f"[xoso] ƒê√£ g·ª≠i log x·ªï s·ªë {today_str} v√†o channel {log_channel_id}")
            else:
                print(f"[xoso] Kh√¥ng t√¨m th·∫•y log channel {log_channel_id}")
        except Exception as e:
            print(f"[xoso] L·ªói g·ª≠i log k·∫øt qu·∫£ x·ªï s·ªë: {e}")
        # G·ª≠i DM cho user tr√∫ng th∆∞·ªüng
        import sqlite3
        from database import DB_PATH
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT user_id, so_ve FROM users WHERE hsd = ?", (today_str,))
            tickets = cursor.fetchall()
        print(f"[xoso] T√¨m th·∫•y {len(tickets)} v√© cho ng√†y {today_str}")
        for user_id, so_ve in tickets:
            so_ve = str(so_ve).zfill(6)
            print(f"[xoso] X·ª≠ l√Ω v√© {so_ve} c·ªßa user {user_id}")
            trung = False
            for name, so_trung, length, prize, emoji in giai_so:
                if so_ve[-length:] in so_trung:
                    message = f"{emoji} B·∫°n ƒë√£ tr√∫ng **Gi·∫£i {name}** v·ªõi s·ªë v√© {so_ve[-length:]}! Nh·∫≠n {prize} sheepcoin!"
                    user_data = get_user_data(user_id)
                    if user_data:
                        balance, last_daily, streak, win_rate, luck, so_ve, hsd, level, exp, invite = user_data
                        print(f"[xoso] User {user_id} tr√∫ng gi·∫£i {name}, c·ªông {prize} coin (t·ª´ {balance} -> {balance + prize})")
                        update_user_data(user_id, balance + prize, last_daily, streak, win_rate, luck, 0, None, level, exp, invite)
                    member = None
                    try:
                        # Th·ª≠ t√¨m member trong t·∫•t c·∫£ guild m√† bot c√≥
                        member = None
                        for guild in self.bot.guilds:
                            member = guild.get_member(int(user_id))
                            if member:
                                break
                        if member:
                            print(f"[xoso] T√¨m th·∫•y member {user_id} trong guild {member.guild.name}")
                            await member.send(message)
                            print(f"[xoso] ƒê√£ g·ª≠i DM th√†nh c√¥ng cho user {user_id}")
                        else:
                            print(f"[xoso] Kh√¥ng t√¨m th·∫•y member {user_id} trong b·∫•t k·ª≥ guild n√†o, th·ª≠ g·ª≠i qua bot.get_user")
                            # Th·ª≠ g·ª≠i qua bot.get_user n·∫øu c√≥
                            try:
                                user = self.bot.get_user(int(user_id))
                                if user:
                                    await user.send(message)
                                    print(f"[xoso] ƒê√£ g·ª≠i DM qua bot.get_user cho user {user_id}")
                                else:
                                    print(f"[xoso] Kh√¥ng t√¨m th·∫•y user {user_id} qua bot.get_user")
                            except Exception as e2:
                                print(f"[xoso] Kh√¥ng th·ªÉ g·ª≠i DM qua bot.get_user cho user {user_id}: {e2}")
                    except Exception as e:
                        print(f"[xoso] L·ªói g·ª≠i DM cho user {user_id}: {e}")
                    trung = True
                    break  # ∆Øu ti√™n gi·∫£i cao nh·∫•t
            if not trung:
                print(f"[xoso] User {user_id} kh√¥ng tr√∫ng gi·∫£i n√†o")
                member = None
                try:
                    # Th·ª≠ t√¨m member trong t·∫•t c·∫£ guild m√† bot c√≥
                    member = None
                    for guild in self.bot.guilds:
                        member = guild.get_member(int(user_id))
                        if member:
                            break
                    if member:
                        print(f"[xoso] T√¨m th·∫•y member {user_id} trong guild {member.guild.name}")
                        await member.send("üò¢ R·∫•t ti·∫øc, b·∫°n kh√¥ng tr√∫ng gi·∫£i n√†o h√¥m nay. Ch√∫c may m·∫Øn l·∫ßn sau!")
                        print(f"[xoso] ƒê√£ g·ª≠i DM th√¥ng b√°o kh√¥ng tr√∫ng cho user {user_id}")
                    else:
                        print(f"[xoso] Kh√¥ng t√¨m th·∫•y member {user_id} trong b·∫•t k·ª≥ guild n√†o ƒë·ªÉ g·ª≠i th√¥ng b√°o kh√¥ng tr√∫ng")
                except Exception as e:
                    print(f"[xoso] L·ªói g·ª≠i DM cho user {user_id}: {e}")

    @commands.command(name="xoso")
    async def xoso(self, ctx, so_ve_chon: str = None):
        user_id = ctx.author.id
        # Ng√†y hi·ªáu l·ª±c l√† ng√†y mai
        today = datetime.now(VN_TZ).date()
        hieu_luc = str(today + timedelta(days=1))
        user_data = get_user_data(user_id)
        if user_data is None:
            return await ctx.send("B·∫°n ch∆∞a c√≥ t√†i kho·∫£n!")
        balance, last_daily, streak, win_rate, luck, so_ve, hsd, level, exp, invite = user_data
        # N·∫øu ƒë√£ c√≥ v√© cho ng√†y mai th√¨ kh√¥ng cho mua n·ªØa
        if hsd == hieu_luc:
            return await ctx.send(f"B·∫°n ƒë√£ mua v√© cho ng√†y {hieu_luc} r·ªìi!, v√© c·ªßa b·∫°n l√† {so_ve}")
        if balance < TICKET_PRICE:
            return await ctx.send("B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ mua v√©!")
        # L·∫•y t·∫•t c·∫£ v√© ƒë√£ ph√°t cho ng√†y mai
        all_tomorrow_tickets = get_all_today_tickets(hieu_luc)
        # N·∫øu user ch·ªçn s·ªë
        if so_ve_chon:
            if not (so_ve_chon.isdigit() and len(so_ve_chon) == 6):
                return await ctx.send("S·ªë v√© ph·∫£i g·ªìm ƒë√∫ng 6 ch·ªØ s·ªë!")
            if so_ve_chon in all_tomorrow_tickets:
                return await ctx.send("S·ªë v√© n√†y ƒë√£ c√≥ ng∆∞·ªùi ch·ªçn cho ng√†y mai, h√£y ch·ªçn s·ªë kh√°c!")
            so_ve_new = so_ve_chon
        else:
            # Random s·ªë v√© kh√¥ng tr√πng
            while True:
                so_ve_new = str(random.randint(100000, 999999)).zfill(6)
                if so_ve_new not in all_tomorrow_tickets:
                    break
        # L∆∞u v√© v√†o user, hsd l√† ng√†y mai
        update_user_data(user_id, balance - TICKET_PRICE, last_daily, streak, win_rate, luck, so_ve_new, hieu_luc, level, exp, invite)
        await ctx.send(f"B·∫°n ƒë√£ mua v√© s·ªë {so_ve_new} cho ng√†y {hieu_luc} v·ªõi gi√° {TICKET_PRICE} coin. K·∫øt qu·∫£ s·∫Ω ƒë∆∞·ª£c c√¥ng b·ªë v√†o ng√†y ƒë√≥!")

    @commands.command(name="xoso_quay")
    async def xoso_quay(self, ctx):
        today = str(datetime.now(VN_TZ).date())
        ketqua_path = "xoso_ketqua.json"
        # N·∫øu ƒë√£ c√≥ k·∫øt qu·∫£ h√¥m nay th√¨ ch·ªâ hi·ªÉn th·ªã l·∫°i
        if os.path.exists(ketqua_path):
            with open(ketqua_path, "r", encoding="utf-8") as f:
                all_kq = json.load(f)
        else:
            all_kq = {}
        if today in all_kq:
            giai_so = all_kq[today]
            await ctx.send("üîî K·∫øt qu·∫£ x·ªï s·ªë h√¥m nay:")
        else:
            # N·∫øu ch∆∞a c√≥ k·∫øt qu·∫£ h√¥m nay, t·ª± ƒë·ªông quay v√† l∆∞u k·∫øt qu·∫£
            giai_config = [
                ("ƒê·∫∑c bi·ªát", 1, 6, 1000, "üéâ"),
                ("Nh·∫•t", 1, 5, 500, "ü•à"),
                ("Nh√¨", 3, 4, 400, "ü•â"),
                ("Ba", 5, 3, 300, "üèÖ"),
                ("B·ªën", 10, 2, 200, "üèÖ"),
            ]
            giai_so = []
            for name, count, length, prize, emoji in giai_config:
                so_trung = random_unique_numbers(count, length)
                giai_so.append([name, so_trung, length, prize, emoji])
            all_kq[today] = giai_so
            with open(ketqua_path, "w", encoding="utf-8") as f:
                json.dump(all_kq, f, ensure_ascii=False)
            # G·ª≠i log k·∫øt qu·∫£ x·ªï s·ªë cho admin sau khi quay
            try:
                log_channel_id = 1398452904700153866
                log_channel = self.bot.get_channel(log_channel_id)
                if log_channel:
                    await log_channel.send(f"üéâ ƒê√£ quay x·ªï s·ªë ng√†y {today}")
                    print(f"[xoso] ƒê√£ g·ª≠i log x·ªï s·ªë {today} v√†o channel {log_channel_id}")
                else:
                    print(f"[xoso] Kh√¥ng t√¨m th·∫•y log channel {log_channel_id}")
            except Exception as e:
                print(f"[xoso] L·ªói g·ª≠i log k·∫øt qu·∫£ x·ªï s·ªë: {e}")
            await ctx.send("üîî ƒê√£ quay s·ªë v√† c√¥ng b·ªë k·∫øt qu·∫£ x·ªï s·ªë h√¥m nay!")
        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        embed = discord.Embed(
            title=f"üéâ K·∫øt qu·∫£ x·ªï s·ªë {today}",
            color=discord.Color.gold()
        )
        for name, so_trung, length, prize, emoji in giai_so:
            embed.add_field(name=f"{name} ({length} s·ªë, {len(so_trung)} gi·∫£i)", value=", ".join(so_trung), inline=False)
        await ctx.send(embed=embed)
        # Th√¥ng b√°o th·ªùi gian c√≤n l·∫°i ƒë·∫øn 0h ng√†y m·ªõi
        now = datetime.now(VN_TZ)
        next_open = (now + timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)
        delta = next_open - now
        hours, remainder = divmod(int(delta.total_seconds()), 3600)
        minutes, seconds = divmod(remainder, 60)
        time_str = f"{hours} gi·ªù {minutes} ph√∫t {seconds} gi√¢y"
        await ctx.send(f"‚è∞ Th·ªùi gian ƒë·∫øn ng√†y m·ªõi: {time_str}")

async def setup(bot):
    cog = XoSo(bot)
    await bot.add_cog(cog)
    cog.xoso_task = bot.loop.create_task(cog.auto_xoso())
