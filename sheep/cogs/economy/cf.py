import discord
from discord.ext import commands
import random
from database import get_user_data, update_user_data

class CF(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command(name="cf", help="Tung ƒë·ªìng xu c∆∞·ª£c coin: v.cf <s·ªë ti·ªÅn> <heads/tails>")
    @commands.cooldown(rate=1, per=5, type=commands.BucketType.user)
    async def cf(self, ctx, amount: int = None, choice: str = None):
        user_id = ctx.author.id
        user_data = get_user_data(user_id)
        if user_data is None:
            return await ctx.send("B·∫°n ch∆∞a c√≥ t√†i kho·∫£n. H√£y d√πng l·ªánh ƒëƒÉng k√Ω tr∆∞·ªõc!")
        balance, last_daily, streak, win_rate, luck, so_ve, hsd, level, exp, invite = user_data
        if amount is None or choice is None:
            return await ctx.send("C√∫ ph√°p: v.cf <s·ªë ti·ªÅn> <heads/tails>")
        if amount <= 0:
            return await ctx.send("S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!")
        if amount > 250_000:
            amount = 250_000
        if amount > balance:
            return await ctx.send(f"B·∫°n kh√¥ng ƒë·ªß coin ƒë·ªÉ c∆∞·ª£c `{amount}`!")

        choice = choice.lower()
        if choice not in ["heads", "tails", "h", "t"]:
            return await ctx.send("B·∫°n ch·ªâ ƒë∆∞·ª£c ch·ªçn heads ho·∫∑c tails!")
        user_choice = "heads" if choice in ["heads", "h"] else "tails"

        # Tung ƒë·ªìng xu
        result = random.choice(["heads", "tails"])
        win = (user_choice == result)
        new_balance = balance + amount if win else balance - amount
        update_user_data(user_id, new_balance, last_daily, streak, win_rate, luck, so_ve, hsd, level, exp, invite)

        # So·∫°n tin nh·∫Øn k·∫øt qu·∫£
        msg = f"{ctx.author.mention} spent üßæ `{amount:,}` and chose **{user_choice}**\nThe coin spins... "
        msg += "ü™ô"
        if win:
            msg += f"and you won `{amount * 2:,}`! üéâ"
        else:
            msg += f"and you lost it all.... :c"
        await ctx.send(msg)

    @cf.error
    async def cf_error(self, ctx, error):
        if isinstance(error, commands.CommandOnCooldown):
            await ctx.send(f"‚è≥ B·∫°n c·∫ßn ch·ªù {error.retry_after:.1f} gi√¢y tr∆∞·ªõc khi d√πng l·∫°i l·ªánh n√†y.")

async def setup(bot):
    await bot.add_cog(CF(bot)) 