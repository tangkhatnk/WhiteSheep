import discord
from discord.ext import commands
import asyncio
import random
from database import get_user_data, update_user_data

class TaiXiu(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.lose_streak = {}  # user_id: s·ªë tr·∫≠n thua li√™n ti·∫øp

    @commands.command(name="taixiu", alliases = ['tx', 'taixiu'], description="Ch∆°i T√†i X·ªâu v·ªõi Sheep Coin")
    @commands.cooldown(rate=1, per=8, type=commands.BucketType.user)
    async def taixiu(self, ctx, prize: str = None):
        user_id = ctx.author.id
        user_data = get_user_data(user_id)

        if user_data is None:
            return await ctx.send("<a:excla:1404730540460085390> B·∫°n ch∆∞a c√≥ t√†i kho·∫£n. H√£y d√πng l·ªánh ƒëƒÉng k√Ω tr∆∞·ªõc!")
        _, balance, last_daily, streak, win_rate, luck, so_ve, hsd, level, exp, invite = user_data

        if prize is None:
            return await ctx.send("B·∫°n ph·∫£i nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c!")

        original_prize = prize
        if prize.lower() == "all":
            prize = min(balance, 2000)
            win_rate = max(0, win_rate - 10)  # Gi·∫£m 10% t·ªâ l·ªá th·∫Øng, kh√¥ng nh·ªè h∆°n 0
        else:
            try:
                prize = int(prize)
                if prize > 2000:
                    prize = 2000
            except ValueError:
                return await ctx.send("S·ªë ti·ªÅn c∆∞·ª£c kh√¥ng h·ª£p l·ªá!")

        if prize <= 0:
            return await ctx.send(embed=discord.Embed(
                description="‚ö†Ô∏è S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0!",
                color=discord.Color.orange()
            ))

        if prize > balance:
            return await ctx.send(embed=discord.Embed(
                description=f"‚ùå B·∫°n kh√¥ng ƒë·ªß xu ƒë·ªÉ c∆∞·ª£c **{prize:,}ƒë**. S·ªë d∆∞ hi·ªán t·∫°i: **{balance:,}ƒë**.",
                color=discord.Color.red()
            ))

        emojis = {"üî¥": "x·ªâu", "üü¢": "t√†i"}

        # B∆∞·ªõc 1: Random 1 con preview
        dice_preview = random.randint(1, 6)
        msg1 = await ctx.send(embed=discord.Embed(
            description=f"üé≤ X√∫c x·∫Øc xu·∫•t hi·ªán: {dice_preview}",
            color=discord.Color.blurple()
        ))
        await asyncio.sleep(1.5)

        # B∆∞·ªõc 2: G·ª≠i embed ch·ªçn t√†i/x·ªâu nh∆∞ c≈©
        embed = discord.Embed(
            title="üéÆ T√†i X·ªâu - Ch·ªçn l·ª±a c·ªßa b·∫°n",
            description=(
                f"{ctx.author.mention} ƒë√£ c∆∞·ª£c **{prize:,}ƒë**!\n\n"
                "H√£y ch·ªçn b·∫±ng c√°ch react:\n"
                "üî¥ = **X·ªâu**\n"
                "üü¢ = **T√†i**"
            ),
            color=discord.Color.random()
        )
        message = await ctx.send(embed=embed)

        for emoji in emojis:
            await message.add_reaction(emoji)

        def check(reaction, user):
            return user == ctx.author and str(reaction.emoji) in emojis and reaction.message.id == message.id

        try:
            reaction, _ = await self.bot.wait_for("reaction_add", timeout=30.0, check=check)
        except asyncio.TimeoutError:
            return await ctx.send(embed=discord.Embed(
                description="‚è∞ H·∫øt th·ªùi gian ch·ªçn! Vui l√≤ng th·ª≠ l·∫°i sau.",
                color=discord.Color.red()
            ))

        choice = emojis[str(reaction.emoji)]

        # L·∫•y s·ªë tr·∫≠n thua li√™n ti·∫øp
        lose_streak = self.lose_streak.get(user_id, 0)
        # N·∫øu thua >= 3 v√°n th√¨ tƒÉng win_rate d·∫ßn theo c·∫•p: 3 v√°n = 70%, 4 v√°n = 80%, >=5 v√°n = 90%
        custom_win_rate = win_rate
        if lose_streak == 3:
            custom_win_rate = 70
        elif lose_streak == 4:
            custom_win_rate = 80
        elif lose_streak >= 5:
            custom_win_rate = 90
        # N·∫øu ƒë√°nh all in th√¨ gi·∫£m 10% t·ªâ l·ªá th·∫Øng cu·ªëi c√πng

        # Quy·∫øt ƒë·ªãnh th·∫Øng/thua
        win = random.random() < (custom_win_rate / 100)
        if win:
            result = choice
        else:
            result = "t√†i" if choice == "x·ªâu" else "x·ªâu"

        def generate_dice_with_preview(preview, result):
            # Random 2 con c√≤n l·∫°i sao cho t·ªïng 3 con ƒë√∫ng t√†i/x·ªâu
            while True:
                dice2 = [random.randint(1, 6) for _ in range(2)]
                dice = [preview] + dice2
                total = sum(dice)
                if (result == "t√†i" and total > 10) or (result == "x·ªâu" and total <= 10):
                    return dice

        dice = generate_dice_with_preview(dice_preview, result)
        total = sum(dice)
        result_real = "x·ªâu" if total <= 10 else "t√†i"
        win_result = (choice == result_real)
        new_balance = balance + prize if win_result else balance - prize

        # C·∫≠p nh·∫≠t lose_streak
        if win_result:
            self.lose_streak[user_id] = 0
        else:
            self.lose_streak[user_id] = lose_streak + 1

        # C·∫≠p nh·∫≠t database
        update_user_data(
            user_id,
            new_balance,
            last_daily,
            streak,
            win_rate,
            luck,
            so_ve,
            hsd,
            level,
            exp,
            invite
        )

        result_embed = discord.Embed(
            title="üé≤ K·∫øt qu·∫£ T√†i X·ªâu",
            color=discord.Color.green() if win_result else discord.Color.red()
        )
        result_embed.set_thumbnail(url="https://media.tenor.com/i6UYeLKWyCoAAAAd/dice-roll.gif")
        result_embed.add_field(name="üé≤ X√∫c x·∫Øc", value=f"`{' + '.join(map(str, dice))} = {total}`", inline=False)
        result_embed.add_field(name="üì¢ K·∫øt qu·∫£", value=f"**{result.upper()}**", inline=True)
        result_embed.add_field(name="üßë‚Äçüíº Ng∆∞·ªùi ch∆°i", value=ctx.author.mention, inline=True)
        result_embed.add_field(name="üîé B·∫°n ch·ªçn", value=f"**{choice.upper()}**", inline=True)
        result_embed.add_field(
            name="üéâ Tr·∫°ng th√°i",
            value="‚úÖ B·∫°n **TH·∫ÆNG**!" if win_result else "‚ùå B·∫°n **THUA**!",
            inline=False
        )
        result_embed.add_field(name="üí∞ S·ªë d∆∞ m·ªõi", value=f"**{new_balance:,}ƒë**", inline=False)

        await message.edit(embed=result_embed)
        await msg1.delete()

    @taixiu.error
    async def taixiu_error(self, ctx, error):
        if isinstance(error, commands.CommandOnCooldown):
            seconds = int(error.retry_after)
            await ctx.send(f"‚è± | {ctx.author.name}! You need to wait {seconds}S")

async def setup(bot):
    await bot.add_cog(TaiXiu(bot))