import discord
from discord.ext import commands
from discord.ui import View, Button
import asyncio
import random
from database import get_user_data, update_user_data

# Danh s√°ch c√°c emoji b√†i
CARD_EMOJIS = [
    "<a:2_b:1403762489102958733>",
    "<a:3_b:1403762581038170315>",
    "<a:4_c:1403762746729955461>",
    "<a:5_c:1403762935842603059>",
    "<a:6_r:1403763013370118255>",
    "<a:7_c:1403763141745316012>",
    "<a:8_c:1403763198871470181>",
    "<a:9_c:1403763262687805646>",
    "<a:10_b:1403763347572265123>",
    "<a:j_b:1403763538069291059>",
    "<a:Q_r:1403763645489479720>",
    "<a:k_c:1403763728159342615>",
    "<a:a_c:1403763811722465292>",
]

CARD_VALUES = [2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 1]  # Gi√° tr·ªã t∆∞∆°ng ·ª©ng

# B·∫£n ƒë·ªì nhanh t·ª´ emoji -> gi√° tr·ªã c∆° b·∫£n (A=1, J/Q/K=10)
EMOJI_TO_VALUE = {emoji: value for emoji, value in zip(CARD_EMOJIS, CARD_VALUES)}

def calculate_hand_value_from_emojis(card_emojis: list[str]) -> int:
    # Quy t·∫Øc √Åt linh ho·∫°t: c√≥ th·ªÉ l√† 1, 10 ho·∫∑c 11. Ch·ªçn t·ªïng t·ªët nh·∫•t ‚â§ 21 n·∫øu c√≥.
    values = [EMOJI_TO_VALUE.get(e, 0) for e in card_emojis]
    non_aces_sum = sum(v for v in values if v != 1)
    ace_count = sum(1 for v in values if v == 1)

    if ace_count == 0:
        return non_aces_sum

    best_valid = None
    min_total = None
    # Th·ª≠ m·ªçi ph√¢n b·ªë s·ªë √Åt l·∫•y 11, 10, 1
    for elevens in range(ace_count, -1, -1):
        for tens in range(ace_count - elevens, -1, -1):
            ones = ace_count - elevens - tens
            total = non_aces_sum + elevens * 11 + tens * 10 + ones * 1
            if total <= 21:
                if best_valid is None or total > best_valid:
                    best_valid = total
            if min_total is None or total < min_total:
                min_total = total
    return best_valid if best_valid is not None else min_total

def detect_special_badge(card_emojis: list[str], current_score: int | None = None) -> str:
    # X√å B√ÄN: 2 √Åt
    if len(card_emojis) == 2 and all(c == CARD_EMOJIS[12] for c in card_emojis):
        return "(X√å B√ÄN)"
    # X√å D√ÅCH: 2 l√°, 1 √Åt + 1 l√° 10/J/Q/K
    if len(card_emojis) == 2:
        has_ace = any(c == CARD_EMOJIS[12] for c in card_emojis)
        has_ten_value = any(EMOJI_TO_VALUE.get(c, 0) == 10 for c in card_emojis)
        if has_ace and has_ten_value:
            return "(X√å D√ÅCH)"
    # NG≈® LINH: >=5 l√° v√† <= 21 ƒëi·ªÉm
    score = current_score if current_score is not None else calculate_hand_value_from_emojis(card_emojis)
    if len(card_emojis) >= 5 and score <= 21:
        return "(NG≈® LINH)"
    return ""

def get_hand_rank_tuple(card_emojis: list[str], score: int) -> tuple[int, int]:
    """Tr·∫£ v·ªÅ (rank, points) ƒë·ªÉ so s√°nh:
    - rank: -1=BUST, 1=NORMAL, 2=NG≈® LINH, 3=X√å D√ÅCH, 4=X√å B√ÄN
    - points: d√πng ƒë·ªÉ ph√¢n ƒë·ªãnh khi c√πng h·∫°ng (kh√¥ng √°p d·ª•ng cho X√å B√ÄN/X√å D√ÅCH ‚Üí coi ngang nhau)
    """
    if score > 21:
        return (-1, 0)
    badge = detect_special_badge(card_emojis, score)
    if badge == "(X√å B√ÄN)":
        return (4, 21)
    if badge == "(X√å D√ÅCH)":
        return (3, 21)
    if badge == "(NG≈® LINH)":
        return (2, score)
    return (1, score)

class TaobanView(View):
    def __init__(self, bot, host_id, channel, bet_amount: int = 0):
        super().__init__(timeout=None)
        self.bot = bot
        self.host_id = host_id
        self.channel = channel
        self.bet_amount = max(0, int(bet_amount))
        self.players = [host_id]
        self.started = False
        self.scores = {host_id: 0}
        self.player_cards = {host_id: []}
        self.dealer_cards = []
        self.dealer_score = 0
        self.current_player_index = 0
        self.original_message = None
        self.finished_players: set[int] = set()
        self.draw_counts: dict[int, int] = {host_id: 0}
        self.latest_controls_message: discord.Message | None = None
        self.refresh_task: asyncio.Task | None = None
        self.game_deadline_ts: float | None = None
        self.active_view: View | None = None
        self.results_sent: bool = False

    def build_lobby_embed(self) -> discord.Embed:
        current_player_count = len(self.players)
        embed = discord.Embed(
            title="Ch√†o m·ª´ng ƒë·∫øn v·ªõi b√†n X√¨ D√°ch!",
            description="üü•‚ô¶Ô∏è C·ªù b·∫°c l√† b√°c th·∫±ng b·∫ßn ‚ô†Ô∏èüñ§\n\n",
            color=discord.Color.blurple(),
        )
        embed.add_field(name="Host", value=f"<@{self.host_id}>", inline=False)
        embed.add_field(name="Th·ªùi gian", value="in 5 seconds", inline=False)
        embed.add_field(name="C∆∞·ª£c", value=f"{self.bet_amount} xu", inline=False)
        embed.add_field(name="T·ªëi ƒëa ng∆∞·ªùi ch∆°i", value=f"{current_player_count}/10", inline=False)
        embed.add_field(
            name="Lu·∫≠t ch∆°i theo Wikipedia",
            value="[Wikipedia](https://vi.wikipedia.org/wiki/X%C3%AC_d%C3%A1ch)",
            inline=False,
        )
        embed.add_field(
            name="D√†nh cho ng∆∞·ªùi m·ªõi kh√¥ng bi·∫øt t√≠nh ƒëi·ªÉm",
            value="[Xem t·∫°i ƒë√¢y](https://blackjack-calc.vercel.app/)",
            inline=False,
        )
        embed.set_footer(text="Nh·∫•n 'Tham gia' ƒë·ªÉ v√†o b√†n ‚Ä¢ Ch·ªß b√†n b·∫•m 'B·∫Øt ƒë·∫ßu' khi s·∫µn s√†ng")
        return embed

    @discord.ui.button(label="Tham gia", style=discord.ButtonStyle.green)
    async def join_button(self, interaction: discord.Interaction, button: Button):
        user = interaction.user
        if self.started:
            await interaction.response.send_message("V√°n ch∆°i ƒë√£ b·∫Øt ƒë·∫ßu, b·∫°n kh√¥ng th·ªÉ tham gia n·ªØa!", ephemeral=True)
            return
        if len(self.players) >= 10:
            await interaction.response.send_message("B√†n ƒë√£ ƒë·ªß ng∆∞·ªùi (10/10)!", ephemeral=True)
            return

        if user.id not in self.players:
            # Ki·ªÉm tra t√†i kho·∫£n v√† s·ªë d∆∞ tr∆∞·ªõc khi cho tham gia
            user_row = get_user_data(user.id)
            if user_row is None:
                await interaction.response.send_message("B·∫°n ch∆∞a c√≥ t√†i kho·∫£n SheepCoin. D√πng `v.start` ƒë·ªÉ t·∫°o!", ephemeral=True)
                return
            _, balance, *rest = user_row
            if balance is None or balance < self.bet_amount:
                await interaction.response.send_message(f"B·∫°n c·∫ßn t·ªëi thi·ªÉu `{self.bet_amount}` xu ƒë·ªÉ tham gia!", ephemeral=True)
                return
            self.players.append(user.id)
            self.scores[user.id] = 0
            self.player_cards[user.id] = []
            self.draw_counts[user.id] = 0
            # G·ª≠i th√¥ng b√°o c√¥ng khai v√† c·∫≠p nh·∫≠t embed c·ªßa b√†n ch∆°i
            await interaction.response.send_message(
                f"{user.mention} ƒë√£ tham gia tr√≤ ch∆°i! ({len(self.players)}/10)", ephemeral=True
            )
            if self.original_message is None:
                self.original_message = interaction.message
            try:
                await self.original_message.edit(embed=self.build_lobby_embed(), view=self)
            except Exception:
                # B·ªè qua l·ªói ch·ªânh s·ª≠a embed n·∫øu c√≥
                pass
        else:
            await interaction.response.send_message("B·∫°n ƒë√£ tham gia r·ªìi!", ephemeral=True)

    @discord.ui.button(label="B·∫Øt ƒë·∫ßu", style=discord.ButtonStyle.red)
    async def start_button(self, interaction: discord.Interaction, button: Button):
        if interaction.user.id != self.host_id:
            await interaction.response.send_message("Ch·ªâ ch·ªß b√†n m·ªõi ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu!", ephemeral=True)
            return
        if self.started:
            await interaction.response.send_message("B√†n ƒë√£ b·∫Øt ƒë·∫ßu r·ªìi!", ephemeral=True)
            return
        if len(self.players) <= 1:
            await interaction.response.send_message("C·∫ßn √≠t nh·∫•t 2 ng∆∞·ªùi ch∆°i ƒë·ªÉ b·∫Øt ƒë·∫ßu (1 host, 1 ng∆∞·ªùi ch∆°i)!", ephemeral=True)
            return
        self.started = True
        await interaction.response.send_message("Tr·∫≠n ƒë·∫•u b·∫Øt ƒë·∫ßu!", ephemeral=False)
        self.original_message = interaction.message
            
        for item in self.children:
            item.disabled = True
        await self.original_message.edit(view=self)

        await self.start_game_flow()

    async def start_game_flow(self):
        self.dealer_cards, self.dealer_score = self.deal_initial_cards()
        # Kh√¥ng hi·ªÉn th·ªã b√†i c·ªßa Dealer khi b·∫Øt ƒë·∫ßu; Dealer c≈©ng r√∫t trong 50 gi√¢y nh∆∞ m·ªçi ng∆∞·ªùi
        await self.channel.send(
            f"B√†n ch∆°i b·∫Øt ƒë·∫ßu! M·ªçi ng∆∞·ªùi c√≥ 50 gi√¢y ƒë·ªÉ 'R√∫t b√†i' v√† 'Xem b√†i'."
        )

        for player_id in self.players:
            if player_id != self.host_id:
                self.player_cards[player_id], self.scores[player_id] = self.deal_initial_cards()

        # G·ª≠i view cho to√†n b·ªô ng∆∞·ªùi ch∆°i, m·ªçi ng∆∞·ªùi c√≥ 50 gi√¢y ƒë·ªÉ thao t√°c
        game_view = GameView(self.players, self, timeout=50)
        msg = await self.channel.send(
            "M·ªói ng∆∞·ªùi ch∆°i ƒë√£ ƒë∆∞·ª£c chia 2 l√°. B·∫°n c√≥ 50 gi√¢y ƒë·ªÉ 'Xem b√†i' v√† 'R√∫t b√†i'. H·∫øt th·ªùi gian s·∫Ω ch·ªët k·∫øt qu·∫£.",
            view=game_view,
        )
        game_view.message = msg
        self.latest_controls_message = msg
        loop = asyncio.get_running_loop()
        self.game_deadline_ts = loop.time() + 50
        self.active_view = game_view
        # B·∫Øt ƒë·∫ßu auto-reload ƒë·ªÉ message lu√¥n ·ªü cu·ªëi k√™nh
        self.refresh_task = asyncio.create_task(self._auto_refresh_controls())

    async def _auto_refresh_controls(self):
        try:
            loop = asyncio.get_running_loop()
            while self.game_deadline_ts:
                remaining = self.game_deadline_ts - loop.time()
                if remaining <= 0:
                    break
                # L√†m m·ªõi tr∆∞·ªõc khi h·∫øt gi·ªù v√†i gi√¢y, ho·∫∑c m·ªói ~12s
                sleep_for = 12 if remaining > 15 else max(1, int(remaining - 2))
                await asyncio.sleep(sleep_for)
                remaining = self.game_deadline_ts - loop.time()
                if remaining <= 0:
                    break
                # T·∫°o view m·ªõi v·ªõi timeout c√≤n l·∫°i ƒë·ªÉ tr√°nh k√©o d√†i th·ªùi gian ch∆°i
                new_view = GameView(self.players, self, timeout=int(max(1, remaining)))
                sent = await self.channel.send(
                    "M·ªói ng∆∞·ªùi ch∆°i ƒë√£ ƒë∆∞·ª£c chia 2 l√°. B·∫°n c√≥ 50 gi√¢y ƒë·ªÉ 'Xem b√†i' v√† 'R√∫t b√†i'. H·∫øt th·ªùi gian s·∫Ω ch·ªët k·∫øt qu·∫£.",
                    view=new_view,
                )
                new_view.message = sent
                # X√≥a message c≈© ƒë·ªÉ tr√°nh spam, ch·ªâ gi·ªØ l·∫°i message m·ªõi nh·∫•t
                old_msg = self.latest_controls_message
                self.latest_controls_message = sent
                self.active_view = new_view
                if old_msg:
                    try:
                        await old_msg.delete()
                    except Exception:
                        pass
        except asyncio.CancelledError:
            return

    def deal_initial_cards(self):
        cards = []
        for _ in range(2):
            card_index = random.randint(0, len(CARD_EMOJIS) - 1)
            card_emoji = CARD_EMOJIS[card_index]
            cards.append(card_emoji)
        # T√≠nh ƒëi·ªÉm l·∫°i theo quy t·∫Øc √Åt linh ho·∫°t sau khi c√≥ ƒë·ªß l√°
        score = calculate_hand_value_from_emojis(cards)
        return cards, score

    async def send_turn_message(self):
        # Kh√¥ng c√≤n d√πng theo l∆∞·ª£t; gi·ªØ h√†m ƒë·ªÉ t∆∞∆°ng th√≠ch n·∫øu n∆°i kh√°c g·ªçi.
        pass

    async def next_turn(self):
        # Kh√¥ng d√πng n·ªØa trong c∆° ch·∫ø 50 gi√¢y to√†n b√†n.
        pass

    async def announce_results(self):
        # So s√°nh theo th·ª© h·∫°ng ƒë·∫∑c bi·ªát: X√å B√ÄN > X√å D√ÅCH > NG≈® LINH > ƒëi·ªÉm th∆∞·ªùng; BUST thua
        non_host_players = [p for p in self.players if p != self.host_id]
        dealer_bust = self.dealer_score > 21

        dealer_rank = get_hand_rank_tuple(self.dealer_cards, self.dealer_score)
        winners = []
        best_tuple = None
        for pid in non_host_players:
            score = self.scores.get(pid, 0)
            cards = self.player_cards.get(pid, [])
            player_tuple = get_hand_rank_tuple(cards, score)
            # Ng∆∞·ªùi th·∫Øng l√† ng∆∞·ªùi c√≥ tuple > dealer_tuple theo th·ª© t·ª± t·ª´ tr√°i sang ph·∫£i
            if player_tuple > dealer_rank:
                if best_tuple is None or player_tuple > best_tuple:
                    best_tuple = player_tuple
                    winners = [pid]
                elif player_tuple == best_tuple:
                    winners.append(pid)

        # X√¢y d·ª±ng m√¥ t·∫£ k·∫øt qu·∫£ t·ª´ng ng∆∞·ªùi ch∆°i
        lines = []
        # Dealer d√≤ng ƒë·∫ßu
        dealer_cards_display = " ".join(self.dealer_cards) if self.dealer_cards else ""
        dealer_badge = detect_special_badge(self.dealer_cards, self.dealer_score)
        dealer_status_text = "(QU√ÅC)" if dealer_bust else dealer_badge
        lines.append(f"**Dealer** (<@{self.host_id}>) {dealer_status_text}\n{dealer_cards_display}    =>  ({self.dealer_score} ƒëi·ªÉm)\n")

        def spaced_label(text: str) -> str:
            return " ".join(list(text))

        # T·∫°o d·ªØ li·ªáu v√† s·∫Øp x·∫øp: WIN -> DRAW -> LOSE; trong m·ªói nh√≥m, h·∫°ng cao h∆°n tr∆∞·ªõc
        players_view = []
        dealer_tuple = get_hand_rank_tuple(self.dealer_cards, self.dealer_score)
        for pid in non_host_players:
            score = self.scores.get(pid, 0)
            cards = self.player_cards.get(pid, [])
            player_tuple = get_hand_rank_tuple(cards, score)
            if score > 21:
                result = "LOSE"
                status_suffix = "(QU·∫ÆC)"
            else:
                if player_tuple > dealer_tuple:
                    result = "WIN"
                    status_suffix = ""
                elif player_tuple == dealer_tuple:
                    result = "DRAW"
                    status_suffix = ""
                else:
                    result = "LOSE"
                    status_suffix = ""
            players_view.append({
                "pid": pid,
                "score": score,
                "cards": cards,
                "player_tuple": player_tuple,
                "result": result,
                "status_suffix": status_suffix,
            })

        def order_key(p):
            result_order = {"WIN": 0, "DRAW": 1, "LOSE": 2}
            rank, points = p["player_tuple"]
            return (result_order[p["result"]], -rank, -points)

        players_view.sort(key=order_key)

        for idx, p in enumerate(players_view, start=1):
            pid = p["pid"]
            score = p["score"]
            cards = p["cards"]
            card_display = " ".join(cards)
            badge = detect_special_badge(cards, score)
            status = spaced_label(p["result"])
            status_suffix = p["status_suffix"]
            trophy = " üèÜ" if pid in winners and len(winners) == 1 else ""
            user_mention = f"<@{pid}>"
            lines.append(
                f"{idx}. {user_mention} {badge} {status_suffix}{trophy}\n({status})\n{card_display}    =>  ({score} ƒëi·ªÉm)\n"
            )

        # C·∫≠p nh·∫≠t s·ªë d∆∞ theo k·∫øt qu·∫£ v·ªõi h·ªá s·ªë: X√å B√ÄN x4, X√å D√ÅCH x3, NG≈® LINH x2, th∆∞·ªùng x1
        def multiplier(badge: str) -> int:
            if badge == "(X√å B√ÄN)":
                return 4
            if badge == "(X√å D√ÅCH)":
                return 3
            if badge == "(NG≈® LINH)":
                return 2
            return 1

        dealer_delta = 0
        deltas: dict[int, int] = {}
        dealer_badge_for_pay = detect_special_badge(self.dealer_cards, self.dealer_score)
        dealer_tuple = get_hand_rank_tuple(self.dealer_cards, self.dealer_score)

        for pid in non_host_players:
            score = self.scores.get(pid, 0)
            cards = self.player_cards.get(pid, [])
            player_badge_for_pay = detect_special_badge(cards, score)
            player_tuple = get_hand_rank_tuple(cards, score)

            bet = self.bet_amount
            if bet <= 0:
                deltas[pid] = 0
                continue

            # N·∫øu c·∫£ hai c√πng bust coi nh∆∞ h√≤a
            if score > 21 and self.dealer_score > 21:
                deltas[pid] = 0
                continue

            if score > 21:
                lose = bet * multiplier(dealer_badge_for_pay)
                deltas[pid] = -lose
                dealer_delta += lose
            elif self.dealer_score > 21 or player_tuple > dealer_tuple:
                win = bet * multiplier(player_badge_for_pay)
                deltas[pid] = +win
                dealer_delta -= win
            elif player_tuple == dealer_tuple:
                deltas[pid] = 0
            else:
                lose = bet * multiplier(dealer_badge_for_pay)
                deltas[pid] = -lose
                dealer_delta += lose

        # √Åp d·ª•ng v√†o DB
        def apply_delta(uid: int, delta: int):
            row = get_user_data(uid)
            if row is None:
                return
            user_id, balance, last_daily, streak, win_rate, luck, so_ve, hsd, level, exp, invite = row
            new_balance = (balance or 0) + delta
            update_user_data(user_id, new_balance, last_daily, streak, win_rate, luck, so_ve, hsd, level, exp, invite)

        for pid, delta in deltas.items():
            apply_delta(pid, delta)
        apply_delta(self.host_id, dealer_delta)

        # Ti√™u ƒë·ªÅ v√† l·ªùi ch√∫c m·ª´ng
        title = "‚ô†Ô∏è ‚ô¶Ô∏è K·∫æT QU·∫¢ CU·ªêI C√ôNG ‚ô£Ô∏è ‚ù§Ô∏è"
        embed = discord.Embed(title=title, color=discord.Color.green())

        if winners:
            winners_text = ", ".join(f"<@{pid}>" for pid in winners)
            congrats = f"Ch√∫c m·ª´ng {winners_text} ƒë√£ chi·∫øn th·∫Øng!"
            embed.add_field(name="", value=f"**{congrats}**", inline=False)

        embed.description = "\n".join(lines)
        embed.set_footer(text="Game ƒë√£ k·∫øt th√∫c. N·∫øu c√≥ l·ªói h√£y b√°o cho qu·∫£n tr·ªã vi√™n.")

        # Kh√¥ng ch·ªânh s·ª≠a message g·ªëc c·ªßa b√†n; g·ª≠i message m·ªõi ƒë·ªÉ kh√¥ng b·ªã ghi ƒë√® khi t·∫°o b√†n m·ªõi
        await self.channel.send(embed=embed)


class GameView(View):
    def __init__(self, players, taoban_view: TaobanView, timeout: int | None = None):
        super().__init__(timeout=timeout)
        self.players = players
        self.taoban_view = taoban_view
        self.game_ended = False
        self.message: discord.Message | None = None

    @discord.ui.button(label="Xem b√†i", style=discord.ButtonStyle.primary)
    async def xembai(self, interaction: discord.Interaction, button: Button):
        if self.game_ended:
            await interaction.response.send_message("V√°n ch∆°i ƒë√£ k·∫øt th√∫c!", ephemeral=True)
            return
            
        user_id = interaction.user.id
        # Ch·∫∑n ng∆∞·ªùi ngo√†i b√†n
        if user_id not in self.players:
            await interaction.response.send_message("B·∫°n kh√¥ng ·ªü trong b√†n n√†y!", ephemeral=True)
            return

        # Dealer xem b√†i c·ªßa Dealer, ng∆∞·ªùi ch∆°i xem b√†i c·ªßa m√¨nh
        if user_id == self.taoban_view.host_id:
            cards = self.taoban_view.dealer_cards
        else:
            cards = self.taoban_view.player_cards.get(user_id, [])
        score = self.taoban_view.scores.get(user_id, 0)
            
        cards_display = " ".join(cards)
        # Ch·ªâ hi·ªÉn th·ªã emoji b√†i, kh√¥ng k√®m ƒëi·ªÉm hay vƒÉn b·∫£n
        await interaction.response.send_message(cards_display, ephemeral=True)

    @discord.ui.button(label="R√∫t b√†i", style=discord.ButtonStyle.secondary)
    async def rutbai(self, interaction: discord.Interaction, button: Button):
        if self.game_ended:
            await interaction.response.send_message("V√°n ch∆°i ƒë√£ k·∫øt th√∫c!", ephemeral=True)
            return
            
        user_id = interaction.user.id
        # Ch·∫∑n ng∆∞·ªùi ngo√†i b√†n
        if user_id not in self.players:
            await interaction.response.send_message("B·∫°n kh√¥ng ·ªü trong b√†n n√†y!", ephemeral=True)
            return

        card_index = random.randint(0, len(CARD_EMOJIS) - 1)
        card_emoji = CARD_EMOJIS[card_index]
        card_value = CARD_VALUES[card_index]

        if user_id == self.taoban_view.host_id:
            # Dealer r√∫t
            self.taoban_view.dealer_cards.append(card_emoji)
            self.taoban_view.dealer_score = calculate_hand_value_from_emojis(
                self.taoban_view.dealer_cards
            )
            self.taoban_view.draw_counts[user_id] = self.taoban_view.draw_counts.get(user_id, 0) + 1
        else:
            # Ng∆∞·ªùi ch∆°i r√∫t
            self.taoban_view.player_cards[user_id].append(card_emoji)
            self.taoban_view.scores[user_id] = calculate_hand_value_from_emojis(
                self.taoban_view.player_cards[user_id]
            )
            self.taoban_view.draw_counts[user_id] = self.taoban_view.draw_counts.get(user_id, 0) + 1
        
        # Ch·ªâ hi·ªÉn th·ªã emoji b√†i c·ªßa ng∆∞·ªùi r√∫t (ephemeral), kh√¥ng hi·ªÉn th·ªã ƒëi·ªÉm
        if user_id == self.taoban_view.host_id:
            cards_display = " ".join(self.taoban_view.dealer_cards)
        else:
            cards_display = " ".join(self.taoban_view.player_cards[user_id])

        await interaction.response.send_message(cards_display, ephemeral=True)

    async def on_timeout(self):
        if self.game_ended:
            return
        # Tr√°nh ch·∫°y nhi·ªÅu l·∫ßn khi c√≥ nhi·ªÅu view do auto-reload
        if self.taoban_view.results_sent:
            return
        self.taoban_view.results_sent = True
        # Kh√≥a n√∫t khi h·∫øt th·ªùi gian v√† ch·ªët k·∫øt qu·∫£
        for item in self.children:
            item.disabled = True
        if self.message:
            try:
                await self.message.edit(view=self)
            except Exception:
                pass
        # G·ª≠i t·ªïng k·∫øt s·ªë l·∫ßn r√∫t c·ªßa t·∫•t c·∫£ ng∆∞·ªùi ch∆°i (bao g·ªìm host/dealer)
        await self.taoban_view.channel.send("‚è±Ô∏è H·∫øt th·ªùi gian 50 gi√¢y.")
        # Kh√¥ng c√≥ l∆∞·ª£t Dealer ri√™ng; Dealer ƒë√£ r√∫t trong 50 gi√¢y.
        # D·ª´ng auto-refresh (n·∫øu ƒëang ch·∫°y)
        if self.taoban_view.refresh_task and not self.taoban_view.refresh_task.done():
            self.taoban_view.refresh_task.cancel()
        self.taoban_view.game_deadline_ts = None
        # X√≥a message controls cu·ªëi c√πng ƒë·ªÉ tr√°nh r√°c k√™nh
        if self.taoban_view.latest_controls_message:
            try:
                await self.taoban_view.latest_controls_message.delete()
            except Exception:
                pass
        try:
            await self.taoban_view.announce_results()
        except Exception as exc:
            # Fallback hi·ªán l·ªói ƒë·ªÉ d·ªÖ debug khi c√≥ s·ª± c·ªë t√≠nh ƒëi·ªÉm
            await self.taoban_view.channel.send(f"‚ùó L·ªói khi t√≠nh k·∫øt qu·∫£: {type(exc).__name__}: {exc}")


class BlackjackCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command()
    @commands.has_permissions(administrator=True)
    async def taoban(self, ctx, bet: int = 0):
        """T·∫°o b√†n ch∆°i X√¨ D√°ch. D√πng: v.taoban <s·ªë_ti·ªÅn>"""
        # C·∫£nh b√°o quy·ªÅn n·∫øu thi·∫øu quy·ªÅn d√πng emoji ngo√†i server
        me = ctx.guild.me if getattr(ctx, "guild", None) else None
        if me:
            perms = ctx.channel.permissions_for(me)
            if not getattr(perms, "use_external_emojis", False):
                await ctx.send("‚ö†Ô∏è Bot ƒëang thi·∫øu quy·ªÅn 'Use External Emojis' t·∫°i k√™nh n√†y. Emoji t√πy ch·ªânh c√≥ th·ªÉ kh√¥ng hi·ªÉn th·ªã.")
        # Ki·ªÉm tra s·ªë d∆∞ c·ªßa host v·ªõi ti·ªÅn c∆∞·ª£c
        row = get_user_data(ctx.author.id)
        if row is None:
            await ctx.send("B·∫°n ch∆∞a c√≥ t√†i kho·∫£n SheepCoin. D√πng `v.start` ƒë·ªÉ t·∫°o!")
            return
        _, balance, *_ = row
        bet_amount = max(0, int(bet))
        if balance is None or balance < bet_amount:
            await ctx.send(f"B·∫°n c·∫ßn t·ªëi thi·ªÉu `{bet_amount}` xu ƒë·ªÉ t·∫°o b√†n!")
            return

        view = TaobanView(bot=self.bot, host_id=ctx.author.id, channel=ctx.channel, bet_amount=bet_amount)
        embed = view.build_lobby_embed()
        sent = await ctx.send(embed=embed, view=view)
        # L∆∞u message g·ªëc ƒë·ªÉ c√≤n c·∫≠p nh·∫≠t s·ªë ng∆∞·ªùi ch∆°i
        view.original_message = sent
        
    @taoban.error
    async def taoban_error(self, ctx, error):
        if isinstance(error, commands.MissingPermissions):
            await ctx.send("B·∫°n c·∫ßn quy·ªÅn Administrator ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")

async def setup(bot):
    await bot.add_cog(BlackjackCog(bot))